# Generic .travis.yml file for running continuous integration on Travis-CI for
# any ROS package.
#
# Available here:
#   - https://github.com/felixduvallet/ros-travis-integration
#
# This installs ROS on a clean Travis-CI virtual machine, creates a ROS
# workspace, resolves all listed dependencies, and sets environment variables
# (setup.bash). Then, it compiles the entire ROS workspace (ensuring there are
# no compilation errors), and runs all the tests. If any of the compilation/test
# phases fail, the build is marked as a failure.
#
# We handle two types of package dependencies specified in the package manifest:
#   - system dependencies that can be installed using `rosdep`, including other
#     ROS packages and system libraries. These dependencies must be known to
#     `rosdistro` and are installed using apt-get.
#   - package dependencies that must be checked out from source. These are handled by
#     `wstool`, and should be listed in a file named dependencies.rosinstall.
#

# There are envioronment variables you may want to change, such as ROS_DISTRO,
# ROSINSTALL_FILE, and the CATKIN_OPTIONS file.  See the README.md for more
# information on these flags, and
# https://docs.travis-ci.com/user/environment-variables/ for information about
# Travis environment variables in general.
#
# Author: Felix Duvallet <felixd@gmail.com>

# NOTE: The build lifecycle on Travis.ci is something like this:
#    before_install
#    install
#    before_script
#    script
#    after_success or after_failure
#    after_script
#    OPTIONAL before_deploy
#    OPTIONAL deploy
#    OPTIONAL after_deploy

################################################################################

sudo: required
cache:
  - apt

# Build all valid Ubuntu/ROS combinations available on Travis VMs.
language: generic
matrix:
  include:
  - name: "Xenial kinetic"
    dist: xenial
    env: ROS_DISTRO=kinetic

# Configuration variables. All variables are global now, but this can be used to
# trigger a build matrix for different ROS distributions if desired.
env:
  global:
    - ROS_CI_DESKTOP="`lsb_release -cs`"  # e.g. [precise|trusty|...]
    - CI_SOURCE_PATH=$(pwd)
    - ROSINSTALL_FILE=$CI_SOURCE_PATH/dependencies.rosinstall
    - CATKIN_OPTIONS=$CI_SOURCE_PATH/catkin.options
    - ROS_PARALLEL_JOBS='-j8 -l6'
    # Set the python path manually to include /usr/-/python2.7/dist-packages
    # as this is where apt-get installs python packages.
    - PYTHONPATH=$PYTHONPATH:/usr/lib/python2.7/dist-packages:/usr/local/lib/python2.7/dist-packages
    - CAMERA_FOLDER=~/camera_ws
    - LOCOBOT_FOLDER=~/low_cost_ws
    - REALSENSE_VERSION="2.18.1-0~realsense0.568"

################################################################################

# Install system dependencies, namely a very barebones ROS setup.

before_install:
  - sudo sh -c "echo \"deb http://packages.ros.org/ros/ubuntu $ROS_CI_DESKTOP main\" > /etc/apt/sources.list.d/ros-latest.list"
  - sudo apt-key adv --keyserver hkp://ha.pool.sks-keyservers.net:80 --recv-key C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654
  - sudo apt-get update -qq
  - sudo apt-get install dpkg
  - sudo apt-get install -y python-catkin-pkg python-rosdep python-wstool ros-$ROS_DISTRO-ros-base
  - sudo apt-get install -y git python-pip python-dev python-virtualenv libssl-dev libusb-1.0-0-dev libgtk-3-dev libglfw3-dev
  - sudo pip install --upgrade cryptography
  - sudo python -m easy_install --upgrade pyOpenSSL
  - sudo pip install --upgrade pip
  - sudo apt-get -y install ros-$ROS_DISTRO-desktop-full
  - source /opt/ros/$ROS_DISTRO/setup.bash
  # Prepare rosdep to install dependencies.
  - sudo rosdep init
  - rosdep update
  # Install camera
  - sudo apt-key adv --keyserver keys.gnupg.net --recv-key C8B3A55A6F3EFCDE || sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-key C8B3A55A6F3EFCDE
  - sudo add-apt-repository "deb http://realsense-hw-public.s3.amazonaws.com/Debian/apt-repo xenial main" -u
  - sudo rm rm -f /etc/apt/sources.list.d/realsense-public.list
  - sudo apt-get update
  - sudo apt-get -y install librealsense2-utils=${REALSENSE_VERSION}
  - sudo apt-get -y install librealsense2-dkms=1.3.4-0ubuntu1
  - sudo apt-get -y install librealsense2=${REALSENSE_VERSION}
  - sudo apt-get -y install librealsense2-udev-rules=${REALSENSE_VERSION}
  - sudo apt-get -y install librealsense2-dev=${REALSENSE_VERSION}
  - sudo apt-get -y install librealsense2-dbg=${REALSENSE_VERSION}
  - sudo modprobe uvcvideo
  - sudo modinfo uvcvideo | grep "version:"
  # Install other things
  - sudo apt-get -y install ros-$ROS_DISTRO-desktop-full ros-kinetic-dynamixel-motor 
  - sudo apt-get -y install ros-kinetic-moveit ros-kinetic-trac-ik ros-kinetic-ar-track-alvar ros-kinetic-turtlebot-* ros-kinetic-move-base 
  - sudo apt-get -y install ros-kinetic-ros-control ros-kinetic-gazebo-ros-control
  - sudo apt-get -y install ros-kinetic-ros-controllers ros-kinetic-navigation ros-kinetic-rgbd-launch
  - sudo apt-get -y install ros-kinetic-kdl-parser-py ros-kinetic-orocos-kdl
  - sudo apt-get -y install ros-kinetic-python-orocos-kdl ros-kinetic-turtlebot

install:  
  - mkdir -p $CAMERA_FOLDER/src
  - cd $CAMERA_FOLDER/src/
  - catkin_init_workspace
  - git clone https://github.com/intel-ros/realsense.git
  - cd realsense
  - git checkout a036d81bcc6890658104a8de1cba24538effd6e3
  - cd $CAMERA_FOLDER
  - catkin_make clean
  - catkin_make -DCATKIN_ENABLE_TESTING=False -DCMAKE_BUILD_TYPE=Release
  - catkin_make install

  - mkdir -p $LOCOBOT_FOLDER/src
  - cd $LOCOBOT_FOLDER/src
  - catkin_init_workspace
  - git clone --recurse-submodules https://github.com/facebookresearch/pyrobot.git
  - cd $LOCOBOT_FOLDER
  - rosdep update 
  - rosdep install --from-paths src -i -y
  - cd $LOCOBOT_FOLDER/src/pyrobot/robots/LoCoBot/install
  - chmod +x install_orb_slam2.sh
  - source install_orb_slam2.sh
  - cd $LOCOBOT_FOLDER
  - catkin_make
  
  - source $CAMERA_FOLDER/devel/setup.bash
  - source $LOCOBOT_FOLDER/devel/setup.bash

# Create a catkin workspace with the package under integration.
install:
  - mkdir -p ~/catkin_ws/src
  - cd ~/catkin_ws/src
  - catkin_init_workspace
  # Create the devel/setup.bash (run catkin_make with an empty workspace) and
  # source it to set the path variables.
  - cd ~/catkin_ws
  - catkin_make
  - source devel/setup.bash
  # Add the package under integration to the workspace using a symlink.
  - cd ~/catkin_ws/src

# Install all dependencies, using wstool first and rosdep second.
# wstool looks for a ROSINSTALL_FILE defined in the environment variables.
before_script:
  # source dependencies: install using wstool.
  - cd ~/catkin_ws/src
  - wstool init
  - if [[ -f $ROSINSTALL_FILE ]] ; then wstool merge $ROSINSTALL_FILE ; fi
  - wstool up
  # package depdencies: install using rosdep.
  - cd ~/catkin_ws
  - rosdep install -y --from-paths src --ignore-src --rosdistro $ROS_DISTRO

# Compile and test (mark the build as failed if any step fails). If the
# CATKIN_OPTIONS file exists, use it as an argument to catkin_make, for example
# to blacklist certain packages.
#
# NOTE on testing: `catkin_make run_tests` will show the output of the tests
# (gtest, nosetest, etc..) but always returns 0 (success) even if a test
# fails. Running `catkin_test_results` aggregates all the results and returns
# non-zero when a test fails (which notifies Travis the build failed).
script:
  - source /opt/ros/$ROS_DISTRO/setup.bash
  - cd ~/catkin_ws
  - catkin_make $( [ -f $CATKIN_OPTIONS ] && cat $CATKIN_OPTIONS )
  # Run the tests, ensuring the path is set correctly.
  - source devel/setup.bash
  - catkin_make run_tests && catkin_test_results
